{"version":3,"sources":["components/PlatformFilter.js","components/columns.js","components/AppFilter.js","components/DateFilter.js","datatable/index.jsx","charts/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["PlatfromFilter","column","setFilter","filterValue","className","type","id","name","value","onChange","e","target","defaultChecked","for","GROUPS","Header","columns","accessor","disableSortBy","Filter","filter","rows","columnIds","year","getFullYear","month","getMonth","day","getDate","row","original","date","fullDate","options","Date","label","useState","setLabel","setDate","selected","dateFormat","minDate","maxDate","placeholderText","placeholder","arrowClassName","placeholderClassName","platform","disableFilters","Cell","Math","round","Datatable","data","useMemo","useTable","initialState","pageSize","hiddenColumns","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","gotoPage","pageCount","state","allColumns","prepareRow","pageIndex","map","getToggleHiddenProps","canFilter","render","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","getRowProps","cells","cell","getCellProps","disabled","onClick","length","defaultValue","pageNumber","Number","Charts","chartData","setChartData","setPlatform","metric","setMetric","funRace","setFunRace","paperFold","setPaperFold","jellyDye","setJellyDye","responsive","title","text","display","fontSize","scales","yAxes","ticks","min","max","stepSize","gridLines","xAxes","autoSkip","maxTicksLimit","legend","align","labels","optionsData","setOptionsData","dates","funRaceClicks","funRaceDaus","funRaceImpressions","funRaceInstalls","funRaceRevenues","foldPuzzleClicks","foldPuzzleDaus","foldPuzzleImpressions","foldPuzzleInstalls","foldPuzzleRevenues","jellyDyeClicks","jellyDyeDaus","jellyDyeImpressions","jellyDyeInstalls","jellyDyeRevenues","clicksOptions","maintainAspectRatio","aspectRatio","dauOptions","impressionsOptions","installsOptions","handleChange","funRaceData","app","foldPuzzleData","jellyDyeData","push","clicks","dau","impressions","installs","revenue","bindData","datasets","backgroundColor","borderColor","borderWidth","pointRadius","pointHoverRadius","pointBackgroundColor","pointHoverBackgroundColor","pointStyle","renderChart","useEffect","checked","App","setData","activeTab","setActiveTab","axios","get","then","res","catch","err","console","log","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb6e8d1e.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nexport const PlatfromFilter =({column}) => {\r\n\r\n\r\n\r\n    const { filterValue, setFilter } = column;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex-col items-center justify-center text-lg mt-2\">\r\n                <div>\r\n                    <input type=\"radio\" className=\"mr-1\" \r\n                            id=\"all\" name=\"platforms\" \r\n                            value={''} \r\n                            onChange={(e) => setFilter(e.target.value)} \r\n                            defaultChecked />\r\n                    <label for=\"all\" className=\"font-semibold\">All</label>\r\n                </div>\r\n                <div className=\"block\">\r\n                    <input type=\"radio\" className=\"mr-1\" \r\n                            id=\"Android\" \r\n                            name=\"platforms\" value={'Android'} \r\n                            onChange={(e) => setFilter(e.target.value)} />\r\n                    <label for=\"Android\" className=\"font-semibold\">Android</label>\r\n                </div>\r\n                <div>\r\n                    <input type=\"radio\" \r\n                            className=\"mr-1\" id=\"iOS\" name=\"platforms\" \r\n                            value={'iOS'} \r\n                            onChange={(e) => setFilter(e.target.value)} />\r\n                    <label for=\"iOS\" className=\"font-semibold\">iOS</label>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { PlatfromFilter } from './PlatformFilter'\r\nimport { DateFilter } from './DateFilter'\r\nimport { AppFilter } from './AppFilter'\r\n\r\nexport const GROUPS = [\r\n    {\r\n        Header: 'Breakdowns',\r\n        columns: [\r\n            {\r\n                Header: 'App',\r\n                accessor: 'app',\r\n                disableSortBy: true,\r\n                Filter: AppFilter,\r\n            },\r\n            {\r\n                Header: 'Date',\r\n                accessor: 'date',\r\n                filter: (rows, columnIds, filterValue) => {\r\n                    //This function takes the value from the date picker or dropdown menu to filter dates\r\n                    if(filterValue == null) {\r\n                        return rows\r\n                    }\r\n\r\n                    let year = filterValue.getFullYear();\r\n                    let month = filterValue.getMonth() + 1;\r\n                    let day = filterValue.getDate();\r\n\r\n                    if(filterValue.getFullYear() == 2000) {\r\n                        return rows;\r\n                    }\r\n                    else if(filterValue.getFullYear() == 2001) {\r\n                        let filteredRows = rows.filter((row) => {\r\n                            return row.original.date <= '2020-07-30' && row.original.date >= '2020-06-30';\r\n                        });\r\n                        return filteredRows;\r\n                    }\r\n                    else if(filterValue.getFullYear() == 2002) {\r\n                        let filteredRows = rows.filter((row) => {\r\n                            return row.original.date <= '2020-07-30' && row.original.date >= '2020-07-23';\r\n                        });\r\n                        return filteredRows;\r\n                    }\r\n                    else {\r\n                        if (month / 10 < 1) {\r\n                            month = `0${month}`\r\n                        }\r\n                        if ((day / 10) < 1) {\r\n                            day = `0${day}`;\r\n                        }\r\n                        let fullDate = `${year}-${month}-${day}`\r\n\r\n                        let filteredRows = rows.filter((row) => {\r\n                            return row.original.date == fullDate;\r\n                        });\r\n                        return filteredRows;\r\n                    }\r\n                },\r\n                Filter: DateFilter,\r\n            },\r\n            {\r\n                Header: 'Platform',\r\n                accessor: 'platform',\r\n                disableSortBy: true,\r\n                filter: (rows, columnIds, filterValue) => {\r\n                    if (filterValue == '')\r\n                        return rows;\r\n                    let filteredRows = rows.filter((row) => {\r\n                        return row.original.platform == filterValue;\r\n                    });\r\n                    return filteredRows;\r\n                },\r\n                Filter: PlatfromFilter,\r\n                \r\n            },\r\n        ],\r\n    },\r\n    {\r\n        Header: 'Metrics',\r\n        columns: [\r\n            {\r\n                Header: 'Clicks',\r\n                accessor: 'clicks',\r\n                Filter: PlatfromFilter,\r\n                disableFilters: true,\r\n            },\r\n            {\r\n                Header: 'Dau',\r\n                accessor: 'dau',\r\n                Filter: PlatfromFilter,\r\n                disableFilters: true,\r\n            },\r\n            {\r\n                Header: 'Impressions',\r\n                accessor: 'impressions',\r\n                Filter: PlatfromFilter,\r\n                disableFilters: true,\r\n            },\r\n            {\r\n                Header: 'Installs',\r\n                accessor: 'installs',\r\n                Filter: PlatfromFilter,\r\n                disableFilters: true,\r\n            },\r\n            {\r\n                Header: 'Revenue',\r\n                accessor: 'revenue',\r\n                Filter: PlatfromFilter,\r\n                disableFilters: true,\r\n                Cell: ({ value }) => { return Math.round(value * 10) / 10 }  //to get rid of extra decimal places\r\n            },\r\n        ],\r\n    },\r\n]","import React from 'react'\r\n\r\n\r\nexport const AppFilter =({column}) => {\r\n\r\n\r\n\r\n    const { filterValue, setFilter } = column;\r\n\r\n    return (\r\n        <div className=\"flex items-center pr-6\">\r\n            <span className=\"font-semibold w-24\">\r\n                Search App: {' '}\r\n                <input \r\n                    value={filterValue || ''}\r\n                    onChange={(e) => setFilter(e.target.value)}\r\n                    className=\"border-2 border-blue-400 rounded-lg pl-2 w-24\"\r\n                />\r\n            </span>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\n\r\nexport const DateFilter = ({column}) => {\r\n\r\n    //filterValue expects a date, that is why we give pseudo-dates\r\n    const options = [ \r\n        { value: new Date(2000,1,1), label: 'All Time', className: 'font-semibold' },\r\n        { value: new Date(2001,1,1), label: 'Last 30 Days', className: 'font-semibold' },\r\n        { value: new Date(2002,1,1), label: 'Last 7 Days', className: 'font-semibold' },\r\n    ];\r\n\r\n    var [ label, setLabel ] = useState(options[0]);\r\n      \r\n    const [ date, setDate ] = useState('');\r\n    const { filterValue, setFilter } = column;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mt-2 mr-6\">\r\n\r\n                <DatePicker \r\n                selected={date}\r\n                onChange={(e) => {setFilter(e); setDate(e)}}\r\n                dateFormat='yyyy-MM-dd'\r\n                minDate={new Date(2020, 4, 2)} \r\n                maxDate={new Date(2020, 6, 30)}\r\n                className=\"rounded-lg text-center w-48 border-2 font-semibold border-blue-400 pt-1 pb-1\"\r\n                placeholderText='Select a Date..' />\r\n\r\n                <Dropdown \r\n                options={options} \r\n                onChange={(e) => {setFilter(e.value); setLabel(e)}} \r\n                value={label} \r\n                placeholder=\"Select an option\"\r\n                className=\"mt-2 border-2 rounded-md w-48 font-semibold text-center border-blue-400\" \r\n                arrowClassName=\"mt-1\"\r\n                placeholderClassName='ml-8'/>\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}","import React, { useMemo } from 'react'\r\nimport { useTable, useSortBy, usePagination, useFilters } from 'react-table'\r\nimport { Checkbox } from '../components/checkbox';\r\nimport { GROUPS } from '../components/columns'\r\nimport '../components/table.css'\r\n\r\nexport default function Datatable({data}) {\r\n\r\n    const columns = useMemo(() => GROUPS, []);\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canNextPage,\r\n        canPreviousPage,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        state,\r\n        allColumns,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState: {pageSize: 10, hiddenColumns: [\"app\", \"platform\"]},\r\n    },\r\n    useFilters, useSortBy, usePagination);\r\n\r\n    const { pageIndex } = state;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex flex-wrap items-center justify-center gap-x-10 mt-4\">\r\n                {\r\n                    allColumns.map(column => (\r\n                        <div key={column.id}>\r\n                            <input type=\"checkbox\" className=\"hover:shadow-inner transition\" id={column.id} {...column.getToggleHiddenProps()} />\r\n                            <label for={column.id} className=\"text-lg font-semibold cursor-pointer\" >{column.Header}</label>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n            <div className=\"flex justify-around flex-wrap w-full sm:w-1/2 m-auto pl-4 pr-4 sm:p-0\">\r\n                <div className=\"flex items-center justify-between mt-4\">\r\n                    {\r\n                        allColumns.map((column) => (\r\n                            <div>{column.canFilter ? column.render('Filter') : null} </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {\r\n                        headerGroups.map((headerGroup) => \r\n                        (\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                {\r\n                                    headerGroup.headers.map((column) => (\r\n                                        <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                                            <div className=\"relative\">\r\n                                                <div>\r\n                                                    {column.render('Header')}\r\n                                                </div>\r\n                                                <div className=\"absolute -bottom-2 -right-2\">\r\n                                                    {column.isSorted ? (column.isSortedDesc ? \r\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 17l-4 4m0 0l-4-4m4 4V3\" />\r\n                                                        </svg>\r\n                                                        : \r\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7l4-4m0 0l4 4m-4-4v18\" />\r\n                                                        </svg>\r\n                                                        ) \r\n                                                        : \r\n                                                        ''}\r\n                                                </div>\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                }\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {\r\n                        page.map((row) => {\r\n                            prepareRow(row);\r\n                            return (\r\n                                <tr {...row.getRowProps()}>\r\n                                    {\r\n                                        row.cells.map((cell) => {\r\n                                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n                                        })\r\n                                    }\r\n                                    \r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div className=\"flex items-center justify-center mt-4 space-x-4\">\r\n                <button disabled={!canPreviousPage} \r\n                        className={!canPreviousPage ? 'btn-disabled' : 'btn-normal'}\r\n                        onClick={() => gotoPage(0)}>\r\n                        {'<<'}\r\n                </button>\r\n                <button disabled={!canPreviousPage} \r\n                        className={!canPreviousPage ? 'btn-disabled' : 'btn-normal'}\r\n                        onClick={() => previousPage()}>\r\n                        Previous\r\n                </button>\r\n                <button disabled={!canNextPage} \r\n                        className={!canNextPage ? 'btn-disabled' : 'btn-normal'}\r\n                        onClick={() => nextPage()}>\r\n                        Next\r\n                </button>\r\n                <button disabled={!canNextPage} \r\n                        className={!canNextPage ? 'btn-disabled' : 'btn-normal'}\r\n                        onClick={() => gotoPage(pageCount - 1)}>\r\n                        {'>>'}\r\n                </button>\r\n            </div>\r\n            <div className=\"flex items-center justify-center mt-4\">\r\n                Page\r\n                <strong className=\"ml-2\">\r\n                    {pageIndex + 1} of {pageOptions.length}\r\n                </strong>\r\n                {' '}\r\n            </div>\r\n            <div className=\"flex items-center justify-center mt-2\">\r\n                Go to page: {' '}\r\n                <input type=\"number\" defaultValue={pageIndex + 1} onChange={e => {\r\n                    const pageNumber = e.target.value ? Number(e.target.value) -1 : 0;\r\n                    gotoPage(pageNumber);\r\n                }} />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { Line } from 'react-chartjs-2' \r\nimport '../components/chart.css'\r\n\r\nexport default function Charts({data}) {\r\n\r\n    // useState hooks\r\n    const [chartData, setChartData] = useState({});\r\n    const [platform, setPlatform] = useState('Android');\r\n    const [metric, setMetric] = useState('Clicks');\r\n    const [funRace, setFunRace] = useState(true);\r\n    const [paperFold, setPaperFold] = useState(true);\r\n    const [jellyDye, setJellyDye] = useState(true);\r\n\r\n    const [optionsData, setOptionsData] = useState({\r\n        responsive: true,\r\n        title: {text: `Number of Clicks for ${platform}`, display: true, fontSize: 24},\r\n        scales: {\r\n            yAxes: [\r\n                { \r\n                    ticks: {\r\n                        min: 49000,\r\n                        max: 58000,\r\n                        stepSize: 2000\r\n                    },\r\n                    gridLines: {\r\n                        display: true\r\n                    }\r\n                }\r\n            ],\r\n            xAxes: [\r\n                {\r\n                    ticks: {\r\n                        autoSkip: true,\r\n                        maxTicksLimit: 10,\r\n                    },\r\n                    gridLines: {\r\n                        display: false\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        legend: {\r\n            display: true,\r\n            align: 'end',\r\n            labels: {\r\n                fontSize: 12\r\n            }\r\n        },\r\n    });\r\n\r\n    // These arrays will be filled to render the chart\r\n    var dates = [];\r\n\r\n    var funRaceClicks = [];\r\n    var funRaceDaus = [];\r\n    var funRaceImpressions = [];\r\n    var funRaceInstalls = [];\r\n    var funRaceRevenues = [];\r\n\r\n    var foldPuzzleClicks = [];\r\n    var foldPuzzleDaus = [];\r\n    var foldPuzzleImpressions = [];\r\n    var foldPuzzleInstalls = [];\r\n    var foldPuzzleRevenues = [];\r\n\r\n    var jellyDyeClicks = [];\r\n    var jellyDyeDaus = [];\r\n    var jellyDyeImpressions = [];\r\n    var jellyDyeInstalls = [];\r\n    var jellyDyeRevenues = [];\r\n\r\n    var clicksOptions = \r\n    {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        aspectRatio: 6,\r\n        title: {text: `Number of Clicks for ${platform}`, display: true, fontSize: 24},\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        min: 49000,\r\n                        max: 58000,\r\n                        stepSize: 2000\r\n                    },\r\n                    gridLines: {\r\n                        display: true\r\n                    }\r\n                }\r\n            ],\r\n            xAxes: [\r\n                {\r\n                    ticks: {\r\n                        autoSkip: true,\r\n                        maxTicksLimit: 10,\r\n                    },\r\n                    gridLines: {\r\n                        display: false\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        legend: {\r\n            display: true,\r\n            align: 'end',\r\n            labels: {\r\n                fontSize: 12\r\n            }\r\n        },\r\n    };\r\n\r\n    var dauOptions = \r\n    {\r\n        responsive: true,\r\n        title: {text: `DAU value for ${platform}`, display: true, fontSize: 24},\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        min: 0,\r\n                        max: 14000,\r\n                        stepSize: 2000\r\n                    },\r\n                    gridLines: {\r\n                        display: true\r\n                    }\r\n                }\r\n            ],\r\n            xAxes: [\r\n                {\r\n                    ticks: {\r\n                        autoSkip: true,\r\n                        maxTicksLimit: 10,\r\n                    },\r\n                    gridLines: {\r\n                        display: false\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        legend: {\r\n            display: true,\r\n            align: 'end',\r\n            labels: {\r\n                fontSize: 12\r\n            }\r\n        },\r\n    };\r\n\r\n    var impressionsOptions = \r\n    {\r\n        responsive: true,\r\n        title: {text: `Impressions for ${platform}`, display: true, fontSize: 24},\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        min: 495000,\r\n                        max: 545000,\r\n                        stepSize: 10000\r\n                    },\r\n                    gridLines: {\r\n                        display: true\r\n                    }\r\n                }\r\n            ],\r\n            xAxes: [\r\n                {\r\n                    ticks: {\r\n                        autoSkip: true,\r\n                        maxTicksLimit: 10,\r\n                    },\r\n                    gridLines: {\r\n                        display: false\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        legend: {\r\n            display: true,\r\n            align: 'end',\r\n            labels: {\r\n                fontSize: 12\r\n            }\r\n        },\r\n    };\r\n\r\n    var installsOptions = \r\n    {\r\n        responsive: true,\r\n        title: {text: `Installs for ${platform}`, display: true, fontSize: 24},\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        min: 700,\r\n                        max: 3300,\r\n                        stepSize: 500\r\n                    },\r\n                    gridLines: {\r\n                        display: true\r\n                    }\r\n                }\r\n            ],\r\n            xAxes: [\r\n                {\r\n                    ticks: {\r\n                        autoSkip: true,\r\n                        maxTicksLimit: 10,\r\n                    },\r\n                    gridLines: {\r\n                        display: false\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        legend: {\r\n            display: true,\r\n            align: 'end',\r\n            labels: {\r\n                fontSize: 12\r\n            }\r\n        },\r\n    };\r\n\r\n    //Anytime filter data changes, this function is called for re-render\r\n    function handleChange(platform, metric) {\r\n\r\n        setPlatform(platform);\r\n        setMetric(metric);\r\n\r\n        bindData(platform);\r\n        renderChart(metric);\r\n    }\r\n\r\n    //This function is used for filling all the necessary data based on filter options\r\n    function bindData(platform) {\r\n\r\n        dates = [];\r\n\r\n        var funRaceData = data.filter((row) => {\r\n            return row.app == \"Fun Race 3D\" && row.platform == platform;\r\n        });\r\n        var foldPuzzleData = data.filter((row) => {\r\n            return row.app == \"Fold Puzzle\" && row.platform == platform;\r\n        });\r\n        var jellyDyeData = data.filter((row) => {\r\n            return row.app == \"Jelly Dye\" && row.platform == platform;\r\n        });\r\n\r\n        funRaceData.map((row) => {\r\n            dates.push(row.date);\r\n            funRaceClicks.push(row.clicks);\r\n            funRaceDaus.push(row.dau);\r\n            funRaceImpressions.push(row.impressions);\r\n            funRaceInstalls.push(row.installs);\r\n            funRaceRevenues.push(row.revenue);\r\n        });\r\n\r\n        foldPuzzleData.map((row) => {\r\n            foldPuzzleClicks.push(row.clicks);\r\n            foldPuzzleDaus.push(row.dau);\r\n            foldPuzzleImpressions.push(row.impressions);\r\n            foldPuzzleInstalls.push(row.installs);\r\n            foldPuzzleRevenues.push(row.dau);\r\n        });\r\n\r\n        jellyDyeData.map((row) => {\r\n            jellyDyeClicks.push(row.clicks);\r\n            jellyDyeDaus.push(row.dau);\r\n            jellyDyeImpressions.push(row.impressions);\r\n            jellyDyeInstalls.push(row.installs);\r\n            jellyDyeRevenues.push(row.revenue);\r\n        });\r\n    }\r\n\r\n    function renderChart(metric) {\r\n        \r\n        if(funRace && paperFold && jellyDye) {\r\n\r\n            if(metric == 'Clicks') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceClicks,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleClicks,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 12,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeClicks,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        },\r\n                    ]\r\n                });\r\n                setOptionsData(clicksOptions);\r\n            }\r\n            else if(metric == 'Dau') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceDaus,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleDaus,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeDaus,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n            else if(metric == 'Impressions') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(impressionsOptions);\r\n            }\r\n            else if(metric == 'Installs') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(installsOptions);\r\n            }\r\n            else if(metric == 'Revenue') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n        }\r\n        else if(funRace && paperFold) {\r\n            if(metric == 'Clicks') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceClicks,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleClicks,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 12,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });\r\n                setOptionsData(clicksOptions);\r\n            }\r\n            else if(metric == 'Dau') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceDaus,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleDaus,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n            else if(metric == 'Impressions') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(impressionsOptions);\r\n            }\r\n            else if(metric == 'Installs') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(installsOptions);\r\n            }\r\n            else if(metric == 'Revenue') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n        }\r\n        else if(funRace && jellyDye) {\r\n\r\n            if(metric == 'Clicks') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceClicks,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeClicks,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        },\r\n                    ]\r\n                });\r\n                setOptionsData(clicksOptions);\r\n            }\r\n            else if(metric == 'Dau') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceDaus,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeDaus,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n            else if(metric == 'Impressions') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(impressionsOptions);\r\n            }\r\n            else if(metric == 'Installs') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(installsOptions);\r\n            }\r\n            else if(metric == 'Revenue') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n        }\r\n        else if(paperFold && jellyDye) {\r\n\r\n            if(metric == 'Clicks') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleClicks,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 12,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeClicks,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        },\r\n                    ]\r\n                });\r\n                setOptionsData(clicksOptions);\r\n            }\r\n            else if(metric == 'Dau') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleDaus,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeDaus,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n            else if(metric == 'Impressions') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(impressionsOptions);\r\n            }\r\n            else if(metric == 'Installs') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(installsOptions);\r\n            }\r\n            else if(metric == 'Revenue') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n        }\r\n        else if(funRace) {\r\n\r\n            if(metric == 'Clicks') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceClicks,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                    ]\r\n                });\r\n                setOptionsData(clicksOptions);\r\n            }\r\n            else if(metric == 'Dau') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceDaus,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n            else if(metric == 'Impressions') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(impressionsOptions);\r\n            }\r\n            else if(metric == 'Installs') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(installsOptions);\r\n            }\r\n            else if(metric == 'Revenue') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fun Race 3D',\r\n                            data: funRaceRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(53,168,224, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(53,168,224, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 2,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(53,168,224, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(53,168,224, 1)'\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n        }\r\n        else if(paperFold) {\r\n\r\n            if(metric == 'Clicks') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleClicks,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 12,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });\r\n                setOptionsData(clicksOptions);\r\n            }\r\n            else if(metric == 'Dau') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleDaus,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n            else if(metric == 'Impressions') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(impressionsOptions);\r\n            }\r\n            else if(metric == 'Installs') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(installsOptions);\r\n            }\r\n            else if(metric == 'Revenue') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Fold Puzzle',\r\n                            data: foldPuzzleRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(224,52,168, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(224,52,168, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 8,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(24,52,168, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(24,52,168, 1)',\r\n                            pointStyle: 'star',\r\n                        },\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n        }\r\n        else if(jellyDye) {\r\n\r\n            if(metric == 'Clicks') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeClicks,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        },\r\n                    ]\r\n                });\r\n                setOptionsData(clicksOptions);\r\n            }\r\n            else if(metric == 'Dau') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeDaus,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n            else if(metric == 'Impressions') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeImpressions,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(impressionsOptions);\r\n            }\r\n            else if(metric == 'Installs') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeInstalls,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(installsOptions);\r\n            }\r\n            else if(metric == 'Revenue') {\r\n                setChartData({\r\n                    labels: dates,\r\n                    datasets: [\r\n                        {\r\n                            label: 'JellyDye',\r\n                            data: jellyDyeRevenues,\r\n                            backgroundColor: [\r\n                                'rgba(168,224,52, 0)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(168,224,52, 0.7)'\r\n                            ],\r\n                            borderWidth: 2,\r\n                            pointRadius: 6,\r\n                            pointHoverRadius: 4,\r\n                            pointBackgroundColor: 'rgba(168,224,52, 0.7)',\r\n                            pointHoverBackgroundColor: 'rgba(168,224,52, 1)',\r\n                            pointStyle: 'cross',\r\n                        }\r\n                    ]\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n        }\r\n        else {\r\n\r\n            if(metric == 'Clicks') {\r\n                setChartData({\r\n                    labels: dates,\r\n                });\r\n                setOptionsData(clicksOptions);\r\n            }\r\n            else if(metric == 'Dau') {\r\n                setChartData({\r\n                    labels: dates,\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n            else if(metric == 'Impressions') {\r\n                setChartData({\r\n                    labels: dates,\r\n                });   \r\n                setOptionsData(impressionsOptions);\r\n            }\r\n            else if(metric == 'Installs') {\r\n                setChartData({\r\n                    labels: dates,\r\n                });   \r\n                setOptionsData(installsOptions);\r\n            }\r\n            else if(metric == 'Revenue') {\r\n                setChartData({\r\n                    labels: dates,\r\n                });   \r\n                setOptionsData(dauOptions);\r\n            }\r\n        }\r\n      }\r\n\r\n    //useEffect hook for rendering the chart dynamically\r\n    useEffect(() => {handleChange(platform,metric)}, [data, platform, metric, jellyDye, paperFold, funRace]);\r\n\r\n    return (\r\n        <>\r\n            {/* user options */}\r\n            <div className=\"flex items-center flex-wrap justify-center gap-8 xl:gap-16\">\r\n                <div className=\"flex flex-col items-center mt-6 xl:mt-0 pl-12 pr-12\">\r\n                    <div>\r\n                        <span className=\"text-2xl font-bold uppercase text-gray-500\">Metrics</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-center flex-wrap gap-6 mt-4\">\r\n                        <button className={metric == 'Clicks' ? 'metric-btn active-metric' : 'metric-btn inactive-metric'} \r\n                                onClick={() => setMetric('Clicks')} > Clicks </button>\r\n                        <button className={metric == 'Dau' ? 'metric-btn active-metric' : 'metric-btn inactive-metric'} \r\n                                onClick={() => setMetric('Dau')} > Dau </button>\r\n                        <button className={metric == 'Impressions' ? 'metric-btn active-metric' : 'metric-btn inactive-metric'}\r\n                                onClick={() => setMetric('Impressions')} > Impressions </button>\r\n                        <button className={metric == 'Installs' ? 'metric-btn active-metric' : 'metric-btn inactive-metric'} \r\n                                onClick={() => setMetric('Installs')}> Installs </button>\r\n                        <button className={metric == 'Revenue' ? 'metric-btn active-metric' : 'metric-btn inactive-metric'}\r\n                                onClick={() => setMetric('Revenue')} > Revenue </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex flex-col items-center mt-0 xl:mt-2\">\r\n                    <div>\r\n                        <span className=\"text-2xl font-bold uppercase text-gray-500\">Platforms</span>\r\n                    </div>\r\n                    <div className=\"mt-2\">\r\n                        <div>\r\n                            <input type=\"radio\" className=\"mr-1\" id=\"chart-android\" name=\"platforms-chart\" checked={platform==='Android'} value={'Android'} onChange={(e) => setPlatform(e.target.value)} />\r\n                            <label for=\"chart-android\" className=\"text-lg font-semibold cursor-pointer\" >Android</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"radio\" className=\"mr-1\" id=\"chart-ios\" name=\"platforms-chart\" value={'iOS'} onChange={(e) => setPlatform(e.target.value)} />\r\n                            <label for=\"chart-ios\" className=\"text-lg font-semibold\" >iOS</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex flex-col items-center mt-0 xl:mt-2\">\r\n                    <div className=\"mt-1 xl:mt-6\">\r\n                        <span className=\"text-2xl font-bold uppercase text-gray-500\">Apps</span>\r\n                    </div>\r\n                    <div className=\"mt-2\">\r\n                        <div>\r\n                            <input type=\"checkbox\" className=\"mr-1\" id=\"Fun Race 3D\" checked={funRace}  onChange={(e) => setFunRace(e.target.checked)} />\r\n                            <label for=\"Fun Race 3D\" className=\"text-lg font-semibold\" >Fun Race 3D</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"checkbox\" className=\"mr-1\" id=\"Paper Fold\" checked={paperFold} onChange={(e) => setPaperFold(e.target.checked)} />\r\n                            <label for=\"Paper Fold\" className=\"text-lg font-semibold\" >Fold Puzzle</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"checkbox\" className=\"mr-1\" id=\"Jelly Dye\" checked={jellyDye} onChange={(e) => setJellyDye(e.target.checked)} />\r\n                            <label for=\"Jelly Dye\" className=\"text-lg font-semibold\" >Jelly Dye</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* line chart */}\r\n            <div className=\"charts flex flex-wrap justify-center gap-16\">\r\n                <div className=\"chart shadow-xl\">\r\n                    <Line \r\n                        data={chartData}\r\n                        options={optionsData}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}","import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport Datatable from \"./datatable\";\nimport Charts from \"./charts\";\nimport './components/main.css'\n\nfunction App() {\n  \n  const [data, setData] = useState([]);\n  const [activeTab, setActiveTab] = useState(0);\n\n  useEffect(() => {\n    axios.get(\"https://recruitment-mock-data.gjg-ads.io/data\")\n         .then(res=> {\n           setData(res.data.data)\n         })\n         .catch(err => {\n           console.log(err)\n         });\n  }, []);\n\n  return (\n    <div>\n        {/* Header */}\n        <header className=\"pt-6 pl-0 xl:pl-48 pr-0 xl:pr-48 flex items-center justify-center xl:justify-between border-b-2 border-blue-200\">\n          <div className=\"hidden xl:block ml-48\">\n            <img src=\"https://goodjobgames.com/images/gjg-header-logo.svg\" ></img>\n          </div>\n          <div className=\"flex justify-between mr-0 xl:mr-48 md:ml-0\">\n            <button className={activeTab == 0 ? 'tab-btn active-tab uppercase' : 'tab-btn inactive uppercase'} \n                    onClick={() => setActiveTab(0)}>Table View</button>\n            <button className={activeTab == 1  ? 'tab-btn active-tab uppercase' : 'tab-btn inactive uppercase'} \n                    onClick={() => setActiveTab(1)} > Graph View </button>\n          </div>\n        </header> \n\n        {/* Tabs that include table and graph view */}\n        <div className=\"content-tabs\">\n          <div className={activeTab === 0 ? \"content active-content\" : \"content\"}>\n            <Datatable data={data} /> \n          </div>\n          <div className={activeTab === 1 ? \"content active-content\" : \"content\"}>\n            <Charts data={data} />\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}